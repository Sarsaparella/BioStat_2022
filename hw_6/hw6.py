# -*- coding: utf-8 -*-
"""hw6_statsa.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-Fa2lh1DhN7nd5cMsGjt2Z8r5NJW2U5v
"""

import pandas as pd
import numpy as np
import scipy.stats as st
from statsmodels.stats.weightstats import ztest
from scipy.stats import ttest_ind, ttest_rel, mannwhitneyu
from statsmodels.stats.multitest import multipletests

first_cell_type_expressions_path = input('Path to first cell expression values: ')
second_cell_type_expressions_path = input('Path to second cell expression values: ')
save_results_table = input('Path to output file: ')

first_table = pd.read_csv(first_cell_type_expressions_path, index_col = 0)
second_table = pd.read_csv(second_cell_type_expressions_path, index_col = 0)

test_choice = input('''Choose prefered test from the list below (or skip this step for default z-test):
✿ ztest, to calculate the Z-test
✿ ttest_ind, to calculate the T-test for the means of two _independent_ samples of scores 
✿ ttest_rel, to calculate the T-test on two _related_ samples of scores
✿ mannwhitneyu, to perform the Mann-Whitney U rank test on two independent samples.
''')

correction_method = input('''Choose method of correction for multiple tests from statsmodels.stats.multitest.multipletests
(or skip this step for default z-test):
❤ bonferroni, sidak, holm-sidak, holm, simes-hochberg, hommel, fdr_bh, fdr_by, fdr_tsbh, fdr_tsbky ❤
''')

# first_table = pd.read_csv('/content/drive/MyDrive/лекция 5 статистика/b_cells_expression_data.csv')
# second_table = pd.read_csv('/content/drive/MyDrive/лекция 5 статистика/nk_cells_expression_data.csv')

tests_dict = {'ztest': ztest, '': ztest, 'ttest_ind': ttest_ind,
              'ttest_rel': ttest_rel, 'mannwhitneyu': mannwhitneyu}


def check_intervals_intersect(first_ci, second_ci):   
    are_intersect = False
    left_first, right_first = first_ci 
    left_second, right_second = second_ci
    
    if left_first <= right_second and left_second <= right_first:
        are_intersect = True
    else:
        are_intersect = False
    return are_intersect

def check_dge_with_ci(first_table, second_table):
    ci_test_results = []
    all_genes = list(first_table.columns[:-1])
    for gene in all_genes:
        first_ci = st.t.interval(alpha=0.95,
              df=len(first_table[gene]) - 1,
              loc=np.mean(first_table[gene]),
              scale=st.sem(first_table[gene]))
        second_ci = st.t.interval(alpha=0.95,
              df=len(second_table[gene]) - 1,
              loc=np.mean(second_table[gene]),
              scale=st.sem(second_table[gene]))
        intersect = check_intervals_intersect(first_ci, second_ci)
        ci_test_results.append(intersect)
    return ci_test_results

def check_dge_with_test(first_table, second_table, test_choice):
    test_results = []
    all_genes = list(first_table.columns[:-1])
    for gene in all_genes:
        _, p_value = tests_dict[test_choice](
            first_table[gene],
            second_table[gene]
            )
        if p_value < 0.05:
            test_result = True
        else:
            test_result = False
        test_results.append(test_result)
    return test_results

def check_pvalues(first_table, second_table, test_choice):
    test_pval = []
    all_genes = list(first_table.columns[:-1])
    for gene in all_genes:
        stat, p_value = tests_dict[test_choice](
            first_table[gene],
            second_table[gene]
            )
        test_pval.append(p_value)
    return test_pval


def mean_diff(first_table, second_table):
    mean_diff = []
    all_genes = list(first_table.columns[:-1])
    for gene in all_genes:
        mean_first = np.mean(first_table[gene])
        mean_second = np.mean(second_table[gene])
        mean_diff.append(mean_second - mean_first)
    return mean_diff

test_pval_results = check_pvalues(first_table, second_table, test_choice)

if correction_method == '':
    results = {
    'Genes': list(first_table.columns[:-1]),
    'ci-test_results': check_dge_with_ci(first_table, second_table),
    'test_results': check_dge_with_test(first_table, second_table, test_choice),
    'test_p-values': test_pval_results,
    'mean_diff': mean_diff(first_table, second_table)
}


else:
    results = {
    'Genes': list(first_table.columns[:-1]),
    'ci-test_results': check_dge_with_ci(first_table, second_table),
    'test_results': check_dge_with_test(first_table, second_table, test_choice),
    'test_p-values': test_pval_results,
    'test_p-values_corr': multipletests(test_pval_results, method = correction_method)[1],
    'mean_diff': mean_diff(first_table, second_table)
}


results = pd.DataFrame(results)
results.head()
results.to_csv(save_results_table)